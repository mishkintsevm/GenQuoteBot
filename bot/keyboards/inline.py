from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


class MenuCallback(CallbackData, prefix="menu"):
  level: int
  menu_name: str
  page: int | None = None
  topic: str | None = None
  author_name: str | None = None
  quote_id: int | None = None


def get_main_menu_kb(*, level: int = 0) -> InlineKeyboardMarkup:
  builder = InlineKeyboardBuilder()

  # 1) –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
  builder.add(
    InlineKeyboardButton(
      text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞",
      callback_data=MenuCallback(
        level=1,
        menu_name="random_quote"
      ).pack()
    )
  )

  # 2) –ü–æ —Ç–µ–º–∞—Ç–∏–∫–µ / –ü–æ –∞–≤—Ç–æ—Ä–∞–º
  builder.add(
    InlineKeyboardButton(
      text="üóÇÔ∏è –ü–æ —Ç–µ–º–∞—Ç–∏–∫–µ",
      callback_data=MenuCallback(level=1, menu_name="topics", page=1).pack()
    ),
    InlineKeyboardButton(
      text="üë§ –ü–æ –∞–≤—Ç–æ—Ä–∞–º",
      callback_data=MenuCallback(level=1, menu_name="authors", page=1).pack()
    )
  )

  return builder.adjust(1, 2).as_markup()


def get_topic_kb(
          topics: list[str],
          total_pages: int,
          *,
          level: int = 1,
          page: int = 1
  ) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    # 1) –ö–Ω–æ–ø–∫–∏ —Ç–µ–º
    for topic in topics:
      builder.add(
        InlineKeyboardButton(
          text=f"üìö {topic}",
          callback_data=MenuCallback(
            level=level + 1,
            menu_name="topic_quotes",
            topic=topic
          ).pack()
        )
      )

    # 2) –ù–∞–≤–∏–≥–∞—Ü–∏—è ‚èÆ / ‚è≠
    if page > 1:
      builder.add(
        InlineKeyboardButton(
          text="‚èÆ –ù–∞–∑–∞–¥",
          callback_data=MenuCallback(
            level=level,
            menu_name="topics",
            page=page - 1
          ).pack()
        )
      )
    if page < total_pages:
      builder.add(
        InlineKeyboardButton(
          text="‚è≠ –î–∞–ª–µ–µ",
          callback_data=MenuCallback(
            level=level,
            menu_name="topics",
            page=page + 1
          ).pack()
        )
      )

    # 3) –ü—Ä–∏–º–µ–Ω—è–µ–º adjust(2) ‚Äî –≤—Å—ë, —á—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ —ç—Ç–æ–≥–æ,
    builder.adjust(2)

    # 4) –û—Ç–¥–µ–ª—å–Ω—ã–º —Ä—è–¥–æ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.row(
      InlineKeyboardButton(
        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
        callback_data=MenuCallback(
          level=0,
          menu_name="main"
        ).pack()
      )
    )

    return builder.as_markup()


def get_author_kb(
        authors: list[str],
        total_pages: int,
        *,
        level: int = 1,
        page: int = 1
) -> InlineKeyboardMarkup:
  builder = InlineKeyboardBuilder()

  # 1) –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
  for name in authors:
    builder.add(
      InlineKeyboardButton(
        text=f"üë§ {name}",
        callback_data=MenuCallback(
          level=level + 1,
          menu_name="author_quotes",
          author_name=name
        ).pack()
      )
    )

  # 2) –ù–∞–≤–∏–≥–∞—Ü–∏—è ¬´‚èÆ –ù–∞–∑–∞–¥¬ª / ¬´‚è≠ –î–∞–ª–µ–µ¬ª
  if page > 1:
    builder.add(
      InlineKeyboardButton(
        text="‚èÆ –ù–∞–∑–∞–¥",
        callback_data=MenuCallback(
          level=level,
          menu_name="authors",
          page=page - 1
        ).pack()
      )
    )
  if page < total_pages:
    builder.add(
      InlineKeyboardButton(
        text="‚è≠ –î–∞–ª–µ–µ",
        callback_data=MenuCallback(
          level=level,
          menu_name="authors",
          page=page + 1
        ).pack()
      )
    )

  # 3) –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥
  builder.adjust(2)

  # 4) –û—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä—è–¥–æ–º ‚Äî –µ–¥–∏–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é¬ª
  builder.row(
    InlineKeyboardButton(
      text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
      callback_data=MenuCallback(
        level=0,
        menu_name="main"
      ).pack()
    )
  )

  return builder.as_markup()
